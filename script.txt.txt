Git guide
By Aoife Leahy

Git add .:
This command adds new files that will go to your directory. You should use the command git add .
You need to make sure that you spell it right and also add the period at the end in order for this command to work.
When using this command it will add files except for the ones that are matching from .gitignore.
You can also alternatively use the command git add filename/pattern.
When using this command, it only adds files to the next commit only.
If you modify the file after adding it but before actually committing, you should then add it again. This will ignore the first modified version.

Reset:
To reset you need to use the command git reset-filename.
This reset command removes a file from the staging area.
You can commit without it meaning that you can do much more with it and add to it.


Commit:
To use this command, you must use git commit -m “comment”. Git commit.
This will enter the editor mode to enter the multiline comment. 
This command commits or “saves” your file.
It creates a new revision point onto your local repository.
There is another command that you can use that it associated with the commit command.
This command is git commit -amend.
This command allows this commit to be joined to a previous commit rather than just as a separate one.


Status:
To use this command, you must use git status.
With this command it lists all of your files that you have created.
It lists all the modified file that you have made in the working area.
It also lists all the added files that you have created in the staging area.
It lists the current branch that you are working on at that moment.


Git ignore:
In order to use this command, you must use .gitignore. You should not use anything other than this exactly, as if you do it will not work.
To use this, you should create a txt file.
After doing this, you should then rename it to .gitignore and save it into your root directory.
On Windows Explorer, you should use the command “.gitignore.” and then windows should remove the trailing dot.

Status:
To use this command, you must use git status.
With this command it lists all of your files that you have created.
It lists all the modified file that you have made in the working area.
It also lists all the added files that you have created in the staging area.
It lists the current branch that you are working on at that moment.


Branch:
To use this command, you must use git branch new_branch_name.
With this command, it creates a new branch in your local repository.
To look at all the branches that you have created in your local repository, you must use the command git branch -a/-l/-r.


Push:
To use this command, you must use git push.
The reason for using this command is so that you can update the remote node with the current node that you are working on at that moment.
You need to associate the remote node.
The command git push -u origin master pushes the local master or main to the origin on the server.


Merge:
To use this command, you must use the command git merge master.
The purpose of using this command, is that it merges the head with the master.
If separate, git will automatically apply changes.
If the two don’t merge and there is a problem with doing so or if there is any conflict between them. There will be a warning.
You should edit the file(s) and the add it. After doing this you should then commit it.
When using this command, you should merge the main into your branch. 
Only merge it your branch into main when it is ready for everyone, as it will help to avoid any conflict or problems in the future.
You should also merge early into the project to ensure that everyone is happy with it and they are on the same page, which will avoid problems in the future.


Git rm

Git rm to remove file(s)from the staging area.
Format git rm filename
Can use wildcards and -r for recursive
Use - - cached to remove from staging area
Use -f to use on working directory

Git add .:
This command adds new files that will go to your directory. You should use the command git add .
You need to make sure that you spell it right and also add the period at the end in order for this command to work.
When using this command it will add files except for the ones that are matching from .gitignore.
You can also alternatively use the command git add filename/pattern.
When using this command, it only adds files to the next commit only.
If you modify the file after adding it but before actually committing, you should then add it again. This will ignore the first modified version.


